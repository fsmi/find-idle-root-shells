#!/usr/bin/perl
#
# Depends on libsys-utmp-perl
#
# Looks for open shells, owned by root, with valid (pseudo)ttys attached and
# checks whether they've been idle for too long.
#
# Copyright (C) 2007, 2010 Fabian Knittel <fabian.knittel@avona.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

use strict;
use warnings;
use Sys::Utmp;
use Sys::Syslog;
use POSIX qw(strftime uname);
use Proc::ProcessTable;
use Fcntl ':flock';

use vars qw($TIME_FMT $VAR_DIR $CMD $PROC_DIR);
$TIME_FMT = "%Y-%m-%d %H:%M:%S";
$VAR_DIR = "/var/run";
$CMD = "find-idle-root-shells";
$PROC_DIR = "/proc";

use vars qw($DEBUG $DRY_RUN $ALL_USERS $FORCED_NO_ADMIN $LOG_TO_CONSOLE);
$DEBUG = 0;
$DRY_RUN = 0;
$ALL_USERS = 0;
$FORCED_NO_ADMIN = 0;
$LOG_TO_CONSOLE = 0;

use vars qw(%UTMP @TTYDRIVERS @SHELLS $since_last_run);

sub get_processes_hash();
sub get_env_of_process($);
sub get_tty_of_process($);
sub get_groups_of_user($);
sub get_exe_of_process($);
sub get_tty_of_process($);
sub is_screen_process($);
sub is_within_unattached_screen($$);
sub is_valid_shell($);
sub load_shells();
sub load_tty();
sub load_utmp();
sub dp($);
sub within_time($$);
sub retrieve_and_update_last_run($);

if ($DEBUG) {
	openlog($CMD, "pid,ndelay", "user");
}

my $cron_mode = 0;
if ($#ARGV >= 0) {
	if ($ARGV[0] eq '--cron-mode') {
		$cron_mode = 1;
	} else {
		die "Usage: $CMD [--cron-mode]\n".
		    "  --cron-mode  Throttle notification messages.\n";
	}
}

load_utmp();
load_tty();
load_shells();

my $cur_time = time();
my $last_run;

if ($cron_mode) {
	$last_run = retrieve_and_update_last_run($cur_time);

	$since_last_run = $cur_time - $last_run;
}

my $pid_hash = get_processes_hash();
foreach my $pid (keys %{$pid_hash}) {
	my $process = ${$pid_hash}{$pid};

	#
	# Gather further information.
	#

	# Skip non-root processes.
	next unless ($process->uid == 0 || $ALL_USERS);

	# Only processes with a valid tty are interesting.
	my $tty;
	next unless defined($tty = get_tty_of_process($process));

	my $exe;
	next unless defined($exe = get_exe_of_process($process));

	# Skip non-shells.
	next unless is_valid_shell($exe);

	# Skip processes which are running inside an unattached screen.
	next if is_within_unattached_screen($process, $pid_hash);

	my $env;
	next unless ($env = get_env_of_process($process));

	my $last_mod;
	next unless defined ($last_mod = (stat($tty))[9]);

	# Calculate idle time.
	my $idle_time = $cur_time - $last_mod;

	my $who;
	my $login_time;
	my $from;


	# Search for matching line device...
	my $from_x = 0;
	my $ld;
	$tty =~ /^\/dev\/(.*)/;
	my $short_dev = $1;
	if (defined($UTMP{$short_dev})) {
		$ld = $short_dev;
	} else {
		if (${$env}{'DISPLAY'} &&
		    ${$env}{'DISPLAY'} =~ /(.*:[0-9]+)(\.[0-9]+)?/)
		{
			my $short_disp = $1;
			if (defined($UTMP{$short_disp})) {
				$ld = $short_disp;
				$from_x = 1;
			}
		}
	}
	if (defined($ld)) {
		$who = ${$UTMP{$ld}}{'user'};
		$login_time = ${$UTMP{$ld}}{'time'};
		$from = ${$UTMP{$ld}}{'host'};
	}

	my $groups;
	if (defined($who) && ($who ne 'root')) {
		$groups = get_groups_of_user($who);
	}

	my $is_user = 0;
	if ($groups) {
		if (!${$groups}{'adm'}) {
			$is_user = 1;
		}
	}

	#
	# Decide what to do.
	#

	# Defaults
	my $send_warning = 0;
	my $might_kill = 0;
	my $do_kill = 0;

	# Normal user or admin?
	if ($is_user || $FORCED_NO_ADMIN) {
		dp $process->pid." is normal user. idle $idle_time.\n";

		# Warn after 10 minutes idle time.
		if ($idle_time > (10 * 60)) {
			$send_warning = 1;
			$might_kill = 1;
		}

		# Kill after 30 minutes idle time.
		if ($idle_time > (30 * 60)) {
			$do_kill = 1;
		}
	}
	else
	{
		dp $process->pid." is admin. idle $idle_time.\n";

		if ($cron_mode) {
			# 1st warning after 15 minutes inactivity.
			if (within_time($idle_time, 15 * 60)) {
				$send_warning = 1;
				dp $process->pid.": 15 min inactivity\n";

			# 2nd warning after 30 minutes inactivity.
			} elsif (within_time($idle_time, 30 * 60)) {
				$send_warning = 1;
				dp $process->pid.": 30 min inactivity\n";

			# Continous warnings after every 60 minutes of
			# inactivity.
			} elsif ($idle_time >= (60 * 60)) {
				my $t = ($idle_time % (60 * 60));
				dp $process->pid.": >=60 min inactivity ($t)\n";
				if (within_time($t, 0)) {
					$send_warning = 1;
					dp $process->pid.": warning >=60 min ".
					   "inactivity\n";
				}
			}
		} else {
			# Warnings after 15 minutes inactivity.
			if ($idle_time >= (15 * 60)) {
				$send_warning = 1;
				dp $process->pid.": >= 15 min inactivity\n";
			}
		}
	}


	#
	# Do it.
	#

	if ($send_warning) {
		my $s;

		$s = "$exe (".$process->pid.") ";
		if ($from_x) {
			$s .= "(X11) ";
		}
		if ($who) {
			$s .= "$who ";
		}
		$s .= "on ".(uname())[1]." ";
		if ($from) {
			$s .= "from $from";
		}
		$s .= "\n".
		      "  Idle since ".strftime($TIME_FMT, localtime($last_mod)).
		      " (${idle_time}s)\n";
		if ($might_kill) {
			$s .= "  To be killed!\n";
		}
		if ($login_time) {
			$s .= "  Login at ".
			      strftime($TIME_FMT, localtime($login_time))."\n";
		}
		$s .= "  Dev $short_dev\n";

		print $s;
	}
	if ($do_kill) {
		if ($DRY_RUN) {
			print "WOULD have sent SIGUP to ".$process->pid.".\n";
		} else {
			if (kill(1, $process->pid) == 1) {
				print "Sent SIGHUP to ".$process->pid.".\n";
			} else {
				print "Failed to send SIGHUP to ".
				      $process->pid.".\n";
			}
		}
	}
}

sub load_utmp()
{
	my $utmp = Sys::Utmp->new();
	while (my $utent =  $utmp->getutent())
	{
		if ($utent->user_process &&
		    !defined($UTMP{$utent->ut_line()}))
		{
			my $l = $utent->ut_line();

			${$UTMP{$l}}{'user'} = $utent->ut_user;
			${$UTMP{$l}}{'time'} = $utent->ut_time;
			${$UTMP{$l}}{'host'} = $utent->ut_host;
		}
	}
	$utmp->endutent;
}

sub load_tty()
{
	open(D, "/proc/tty/drivers") or die "/proc/tty/drivers: $!\n";
	while (my $d = <D>) {
		if ($d =~ /^[-a-zA-Z0-9\/_]+[ \t]+([-a-zA-Z0-9\/_]+)[ \t]+.*$/)
		{
			my $ttydriver = $1;

			# Skip ptmx, it controls ttys, but doesn't represent
			# in actual tty.
			next if ($ttydriver eq '/dev/ptmx');

			push @TTYDRIVERS, $ttydriver;
		}
	}
	close(D);
}

sub load_shells()
{
	open(S, "/etc/shells") or die "/etc/shells: $!\n";
	@SHELLS = <S>;
	close(S);
	chomp(@SHELLS);
}

sub is_valid_shell($)
{
	my $exe = $_[0];
	return (grep({ $_ eq $exe } @SHELLS));
}

sub get_env_of_process($)
{
	my $pid = $_[0]->pid;
	my %ENV;

	open(E, "/proc/$pid/environ") or return;
	my $l = <E>;
	close(E);

	if (defined($l)) {
		my @ENV_LIST = split(/\0/, $l);
		foreach my $e (@ENV_LIST) {
			$e =~ /^(.*?)=(.*)$/;
			$ENV{$1} = $2;
		}
	}
	return \%ENV;
}

sub get_groups_of_user($)
{
	my $user = $_[0];
	my %GROUPS;

	setgrent();
	while (my @GE = getgrent())
	{
		my $group = $GE[0];
		my @MEMBERS = split(/ /, $GE[3]);

		if (grep({ $_ eq $user } @MEMBERS)) {
			$GROUPS{$group} = 1;
		}
	}
	endgrent();

	return \%GROUPS;
}

sub dp($)
{
	if ($DEBUG) {
		if ($LOG_TO_CONSOLE) {
			print STDERR $_[0];
		}

		foreach my $m (split /\n/, $_[0]) {
			next if ($m eq '');
			syslog("debug", $m);
		}
	}
}

sub get_processes_hash()
{
	my %PID_HASH;
	my $process_table = new Proc::ProcessTable;
	foreach my $process (@{$process_table->table}) {
		$PID_HASH{$process->pid} = $process;
	}
	return \%PID_HASH;
}

sub get_exe_of_process($)
{
	my $pid = $_[0]->pid;
	return readlink($PROC_DIR.'/'.$pid.'/exe');
}

sub is_screen_process($)
{
	my $process = $_[0];

	my $exe;
	if (!defined($exe = get_exe_of_process($process))) {
		return 0;
	}

	return ($exe eq '/usr/bin/screen');
}

# This checks whether a parent process is a screen and whether that screen
# currently has a connected tty. The screen will be seen as connected, even
# if it is connected to a disconnected, nested screen. i.e. nesting of screens
# is not supported and considered a too unusual special case.
sub is_within_unattached_screen($$)
{
	my $process = $_[0];
	my $pid_hash = $_[1];

	while ($process->ppid != 1) {
		my $parent = ${$pid_hash}{$process->ppid};

		if (is_screen_process($parent)) {
			if (!defined(get_tty_of_process($parent))) {
				dp $process->pid.": nested within ".
				   "disconnected screen ".$parent->pid."\n";
				return 1;
			} else {
				dp $process->pid.": nested within ".
				   "connected screen ".$parent->pid."\n";
				return 0;
			}
		}
		$process = $parent;
	}

	# We reached init (pid 1).
	return 0;
}

sub get_tty_of_process($)
{
	my $pid = $_[0]->pid;
	my $dev;

	foreach my $fd (</proc/$pid/fd/[0-9]*>) {
		next unless
			defined($dev = readlink($fd));

		foreach my $drv (@TTYDRIVERS) {
			if ($dev =~ /^$drv[\d\/]*$/) {
				return $dev;
			}
		}
	}
	return;
}

sub within_time($$)
{
	my $idle_secs = $_[0];
	my $expected_secs = $_[1];

	return ($idle_secs >= $expected_secs &&
	        $since_last_run > $idle_secs - $expected_secs);
}

sub retrieve_and_update_last_run($)
{
	my $cur_time = $_[0];
	my $last_run;

	my $last_run_file = $VAR_DIR.'/'.$CMD.'.last-run';

	# Create exclusive lock.
	open(LR_LOCK, ">>$last_run_file.'.LCK'") or
		die("$CMD: could not create lock for $last_run_file: $!\n");
	flock(LR_LOCK, LOCK_EX) or
		die("$CMD: could not retrieve lock for $last_run_file: $!\n");

	# Check whether there's anything to load.
	if (-e $last_run_file) {
		# Read old value.
		open(LR, $last_run_file) or
			die("$CMD: reading $last_run_file: $!\n");
		if ($last_run = <LR>) {
			# There's a value, process it.
			chomp $last_run;
		} else {
			# No value there, assume no previous run.
			$last_run = 0;
		}
		close(LR);
	}
	else
	{
		# No previous run.
		$last_run = 0;
	}

	# Write current time as new 'last run' value.
	open(LR, ">".$last_run_file) or
		die("$CMD: writing $last_run_file: $!\n");
	print LR $cur_time;
	close(LR) or
		die("$CMD: writing $last_run_file: $!\n");

	# Release the lock.
	flock(LR_LOCK, LOCK_UN);
	close(LR_LOCK);
}
